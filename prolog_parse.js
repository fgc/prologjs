var parser = (function() {
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      function stringEscape(s) {
        function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

        return s
          .replace(/\\/g,   '\\\\')
          .replace(/"/g,    '\\"')
          .replace(/\x08/g, '\\b')
          .replace(/\t/g,   '\\t')
          .replace(/\n/g,   '\\n')
          .replace(/\f/g,   '\\f')
          .replace(/\r/g,   '\\r')
          .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
          .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
          .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
          .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
      }

      var expectedDesc, foundDesc;

      switch (expected.length) {
        case 0:
          expectedDesc = "end of input";
          break;

        case 1:
          expectedDesc = expected[0];
          break;

        default:
          expectedDesc = expected.slice(0, -1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }

      foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

      return "Expected " + expectedDesc + " but " + foundDesc + " found.";
    }

    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
    this.message  = buildMessage(expected, found);
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$startRuleFunctions = { program: peg$parseprogram },
        peg$startRuleFunction  = peg$parseprogram,

        peg$c0 = null,
        peg$c1 = [],
        peg$c2 = function(first, rest) {
            return [first].concat(rest);
        },
        peg$c3 = ".",
        peg$c4 = "\".\"",
        peg$c5 = function(a) {
                return a;
            },
        peg$c6 = ":-",
        peg$c7 = "\":-\"",
        peg$c8 = function(head, body) {
                return {"term": "rule",
                        "head": head,
                        "body": body};
            },
        peg$c9 = ",",
        peg$c10 = "\",\"",
        peg$c11 = function(b) {return b;},
        peg$c12 = function(s) {return s;},
        peg$c13 = function(l) {return l;},
        peg$c14 = function(c) {return {"term":"constant", "value":c};},
        peg$c15 = function(v) {return {"term":"variable", "name":v};},
        peg$c16 = "(",
        peg$c17 = "\"(\"",
        peg$c18 = ")",
        peg$c19 = "\")\"",
        peg$c20 = function(proc, subterms) {
                return {"term":"bif", "proc":procs[proc], "args":subterms};
            },
        peg$c21 = "log",
        peg$c22 = "\"log\"",
        peg$c23 = "unify",
        peg$c24 = "\"unify\"",
        peg$c25 = "write",
        peg$c26 = "\"write\"",
        peg$c27 = "sum",
        peg$c28 = "\"sum\"",
        peg$c29 = function(functor, subterms) {
                return {"term":"structure", "functor":functor, "arity": subterms.length, "subterms":subterms};
            },
        peg$c30 = function(first, rest) {
                return [first].concat(rest);
            },
        peg$c31 = "|",
        peg$c32 = "\"|\"",
        peg$c33 = "[]",
        peg$c34 = "\"[]\"",
        peg$c35 = function() {return {"term":"cons", "car":"nil"};},
        peg$c36 = "[",
        peg$c37 = "\"[\"",
        peg$c38 = "",
        peg$c39 = "]",
        peg$c40 = "\"]\"",
        peg$c41 = function(head, rest, tail) {
                function consify(elems,tail) {
                    if (elems.length == 0) {
        		if(tail == "") {
        		    return {
        			"term": "cons",
        			"car": "nil"};
        		}
        		return tail;
        	    }

                return {"term": "cons",
                        "car": elems[0],
                        "cdr": consify(elems.slice(1),tail)
                       };
        	}

        return consify([head].concat(rest), tail);
        },
        peg$c42 = function(str) { return str;},
        peg$c43 = function(integer) {return integer;},
        peg$c44 = function(first, rest) {
                return first + rest.join("");
            },
        peg$c45 = "\"",
        peg$c46 = "\"\\\"\"",
        peg$c47 = function() {return "";},
        peg$c48 = "'",
        peg$c49 = "\"'\"",
        peg$c50 = function(chars) {return chars.join("");},
        peg$c51 = /^[a-z]/,
        peg$c52 = "[a-z]",
        peg$c53 = /^[A-Z]/,
        peg$c54 = "[A-Z]",
        peg$c55 = "_",
        peg$c56 = "\"_\"",
        peg$c57 = "-",
        peg$c58 = "\"-\"",
        peg$c59 = function(neg, digits) {return parseInt(neg + digits.join(""));},
        peg$c60 = /^[0-9]/,
        peg$c61 = "[0-9]",
        peg$c62 = /^[^"\\\0-\x1F]/,
        peg$c63 = "[^\"\\\\\\0-\\x1F]",
        peg$c64 = "\\\"",
        peg$c65 = "\"\\\\\\\"\"",
        peg$c66 = function() { return '"';  },
        peg$c67 = /^[^'\\\0-\x1F]/,
        peg$c68 = "[^'\\\\\\0-\\x1F]",
        peg$c69 = "\\'",
        peg$c70 = "\"\\\\'\"",
        peg$c71 = function() { return "'";  },
        peg$c72 = /^[^|[\].,()'"\\\0-\x1F]/,
        peg$c73 = "[^|[\\].,()'\"\\\\\\0-\\x1F]",
        peg$c74 = "\\\\",
        peg$c75 = "\"\\\\\\\\\"",
        peg$c76 = function() { return "\\"; },
        peg$c77 = "\\/",
        peg$c78 = "\"\\\\/\"",
        peg$c79 = function() { return "/";  },
        peg$c80 = "\\b",
        peg$c81 = "\"\\\\b\"",
        peg$c82 = function() { return "\b"; },
        peg$c83 = "\\f",
        peg$c84 = "\"\\\\f\"",
        peg$c85 = function() { return "\f"; },
        peg$c86 = "\\n",
        peg$c87 = "\"\\\\n\"",
        peg$c88 = function() { return "\n"; },
        peg$c89 = "\\r",
        peg$c90 = "\"\\\\r\"",
        peg$c91 = function() { return "\r"; },
        peg$c92 = "\\t",
        peg$c93 = "\"\\\\t\"",
        peg$c94 = function() { return "\t"; },
        peg$c95 = /^[ \t\n\r]/,
        peg$c96 = "[ \\t\\n\\r]",

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$cleanupExpected(expected) {
      var i = 0;

      expected.sort();

      while (i < expected.length) {
        if (expected[i - 1] === expected[i]) {
          expected.splice(i, 1);
        } else {
          i++;
        }
      }
    }

    function peg$parseprogram() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== null) {
        s2 = peg$parseassertion();
        if (s2 !== null) {
          s3 = [];
          s4 = peg$parseassertion();
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$parseassertion();
          }
          if (s3 !== null) {
            s4 = peg$parse_();
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c2(s2, s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseassertion() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parserule();
      if (s1 === null) {
        s1 = peg$parseterm();
      }
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c3;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c4); }
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c5(s1);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserule() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseterm();
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          if (input.substr(peg$currPos, 2) === peg$c6) {
            s3 = peg$c6;
            peg$currPos += 2;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s3 !== null) {
            s4 = peg$parse_();
            if (s4 !== null) {
              s5 = peg$parsetermList();
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c8(s1, s5);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseterm() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c9;
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      while (s2 !== null) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c9;
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
      }
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          s3 = peg$parsebifcall();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c11(s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = [];
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c9;
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        while (s2 !== null) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c9;
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
        }
        if (s1 !== null) {
          s2 = peg$parse_();
          if (s2 !== null) {
            s3 = peg$parsestructure();
            if (s3 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c12(s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          s1 = [];
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c9;
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          while (s2 !== null) {
            s1.push(s2);
            if (input.charCodeAt(peg$currPos) === 44) {
              s2 = peg$c9;
              peg$currPos++;
            } else {
              s2 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
          }
          if (s1 !== null) {
            s2 = peg$parse_();
            if (s2 !== null) {
              s3 = peg$parselist();
              if (s3 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c13(s3);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            s1 = [];
            if (input.charCodeAt(peg$currPos) === 44) {
              s2 = peg$c9;
              peg$currPos++;
            } else {
              s2 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            while (s2 !== null) {
              s1.push(s2);
              if (input.charCodeAt(peg$currPos) === 44) {
                s2 = peg$c9;
                peg$currPos++;
              } else {
                s2 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
              }
            }
            if (s1 !== null) {
              s2 = peg$parse_();
              if (s2 !== null) {
                s3 = peg$parseconstant();
                if (s3 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c14(s3);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === null) {
              s0 = peg$currPos;
              s1 = [];
              if (input.charCodeAt(peg$currPos) === 44) {
                s2 = peg$c9;
                peg$currPos++;
              } else {
                s2 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
              }
              while (s2 !== null) {
                s1.push(s2);
                if (input.charCodeAt(peg$currPos) === 44) {
                  s2 = peg$c9;
                  peg$currPos++;
                } else {
                  s2 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c10); }
                }
              }
              if (s1 !== null) {
                s2 = peg$parse_();
                if (s2 !== null) {
                  s3 = peg$parsevariable();
                  if (s3 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c15(s3);
                    if (s1 === null) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsebifcall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== null) {
        s2 = peg$parsebif();
        if (s2 !== null) {
          s3 = peg$parse_();
          if (s3 !== null) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s4 = peg$c16;
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s4 !== null) {
              s5 = peg$parse_();
              if (s5 !== null) {
                s6 = peg$parsetermList();
                if (s6 !== null) {
                  s7 = peg$parse_();
                  if (s7 !== null) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c18;
                      peg$currPos++;
                    } else {
                      s8 = null;
                      if (peg$silentFails === 0) { peg$fail(peg$c19); }
                    }
                    if (s8 !== null) {
                      peg$reportedPos = s0;
                      s1 = peg$c20(s2, s6);
                      if (s1 === null) {
                        peg$currPos = s0;
                        s0 = s1;
                      } else {
                        s0 = s1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsebif() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c21) {
        s0 = peg$c21;
        peg$currPos += 3;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }
      if (s0 === null) {
        if (input.substr(peg$currPos, 5) === peg$c23) {
          s0 = peg$c23;
          peg$currPos += 5;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s0 === null) {
          if (input.substr(peg$currPos, 5) === peg$c25) {
            s0 = peg$c25;
            peg$currPos += 5;
          } else {
            s0 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c26); }
          }
          if (s0 === null) {
            if (input.substr(peg$currPos, 3) === peg$c27) {
              s0 = peg$c27;
              peg$currPos += 3;
            } else {
              s0 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c28); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsestructure() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== null) {
        s2 = peg$parseconstant();
        if (s2 !== null) {
          s3 = peg$parse_();
          if (s3 !== null) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s4 = peg$c16;
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s4 !== null) {
              s5 = peg$parse_();
              if (s5 !== null) {
                s6 = peg$parsetermList();
                if (s6 !== null) {
                  s7 = peg$parse_();
                  if (s7 !== null) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c18;
                      peg$currPos++;
                    } else {
                      s8 = null;
                      if (peg$silentFails === 0) { peg$fail(peg$c19); }
                    }
                    if (s8 !== null) {
                      peg$reportedPos = s0;
                      s1 = peg$c29(s2, s6);
                      if (s1 === null) {
                        peg$currPos = s0;
                        s0 = s1;
                      } else {
                        s0 = s1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetermList() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseterm();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parseterm();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parseterm();
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c30(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseelem() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c9;
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      while (s2 !== null) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c9;
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
      }
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          s3 = peg$parseconstant();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c14(s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = [];
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c9;
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        while (s2 !== null) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c9;
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
        }
        if (s1 !== null) {
          s2 = peg$parse_();
          if (s2 !== null) {
            s3 = peg$parsevariable();
            if (s3 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c15(s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsetail() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 124) {
        s1 = peg$c31;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          s3 = peg$parsevariable();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c15(s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselist() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== null) {
        if (input.substr(peg$currPos, 2) === peg$c33) {
          s2 = peg$c33;
          peg$currPos += 2;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c35();
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== null) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s2 = peg$c36;
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c37); }
          }
          if (s2 !== null) {
            s3 = peg$parse_();
            if (s3 !== null) {
              s4 = peg$parseelem();
              if (s4 !== null) {
                s5 = peg$parse_();
                if (s5 !== null) {
                  s6 = [];
                  s7 = peg$parseelem();
                  while (s7 !== null) {
                    s6.push(s7);
                    s7 = peg$parseelem();
                  }
                  if (s6 !== null) {
                    s7 = peg$parse_();
                    if (s7 !== null) {
                      s8 = peg$parsetail();
                      if (s8 === null) {
                        s8 = peg$c38;
                      }
                      if (s8 !== null) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                          s9 = peg$c39;
                          peg$currPos++;
                        } else {
                          s9 = null;
                          if (peg$silentFails === 0) { peg$fail(peg$c40); }
                        }
                        if (s9 !== null) {
                          peg$reportedPos = s0;
                          s1 = peg$c41(s4, s6, s8);
                          if (s1 === null) {
                            peg$currPos = s0;
                            s0 = s1;
                          } else {
                            s0 = s1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseconstant() {
      var s0, s1;

      s0 = peg$parsesmallConstant();
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parsestring();
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          s1 = peg$parseinteger();
          if (s1 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c43(s1);
          }
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsesmallConstant() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselowerCaseLetter();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parseatomchar();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parseatomchar();
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c44(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevariable() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseupperCaseLetter();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parseatomchar();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parseatomchar();
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c44(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c45;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }
      if (s1 !== null) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c45;
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
        if (s2 !== null) {
          s3 = peg$parse_();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c47();
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s1 = peg$c48;
          peg$currPos++;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
        if (s1 !== null) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s2 = peg$c48;
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c49); }
          }
          if (s2 !== null) {
            s3 = peg$parse_();
            if (s3 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c47();
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 39) {
            s1 = peg$c48;
            peg$currPos++;
          } else {
            s1 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c49); }
          }
          if (s1 !== null) {
            s2 = [];
            s3 = peg$parsesqchar();
            if (s3 !== null) {
              while (s3 !== null) {
                s2.push(s3);
                s3 = peg$parsesqchar();
              }
            } else {
              s2 = peg$c0;
            }
            if (s2 !== null) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c48;
                peg$currPos++;
              } else {
                s3 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c49); }
              }
              if (s3 !== null) {
                s4 = peg$parse_();
                if (s4 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c50(s2);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s1 = peg$c45;
              peg$currPos++;
            } else {
              s1 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c46); }
            }
            if (s1 !== null) {
              s2 = [];
              s3 = peg$parsedqchar();
              if (s3 !== null) {
                while (s3 !== null) {
                  s2.push(s3);
                  s3 = peg$parsedqchar();
                }
              } else {
                s2 = peg$c0;
              }
              if (s2 !== null) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s3 = peg$c45;
                  peg$currPos++;
                } else {
                  s3 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c46); }
                }
                if (s3 !== null) {
                  s4 = peg$parse_();
                  if (s4 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c50(s2);
                    if (s1 === null) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parselowerCaseLetter() {
      var s0;

      if (peg$c51.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }

      return s0;
    }

    function peg$parseupperCaseLetter() {
      var s0;

      if (peg$c53.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }
      if (s0 === null) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s0 = peg$c55;
          peg$currPos++;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
      }

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c57;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }
      if (s1 === null) {
        s1 = peg$c38;
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parsedigit();
        if (s3 !== null) {
          while (s3 !== null) {
            s2.push(s3);
            s3 = peg$parsedigit();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c59(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c60.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }

      return s0;
    }

    function peg$parsedqchar() {
      var s0, s1;

      if (peg$c62.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c64) {
          s1 = peg$c64;
          peg$currPos += 2;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c65); }
        }
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c66();
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === null) {
          s0 = peg$parsectrlchar();
        }
      }

      return s0;
    }

    function peg$parsesqchar() {
      var s0, s1;

      if (peg$c67.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c69) {
          s1 = peg$c69;
          peg$currPos += 2;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c70); }
        }
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c71();
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === null) {
          s0 = peg$parsectrlchar();
        }
      }

      return s0;
    }

    function peg$parseatomchar() {
      var s0;

      if (peg$c72.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c73); }
      }

      return s0;
    }

    function peg$parsectrlchar() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c74) {
        s1 = peg$c74;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c76();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c77) {
          s1 = peg$c77;
          peg$currPos += 2;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c78); }
        }
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c79();
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c80) {
            s1 = peg$c80;
            peg$currPos += 2;
          } else {
            s1 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c81); }
          }
          if (s1 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c82();
          }
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c83) {
              s1 = peg$c83;
              peg$currPos += 2;
            } else {
              s1 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c84); }
            }
            if (s1 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c85();
            }
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
            if (s0 === null) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c86) {
                s1 = peg$c86;
                peg$currPos += 2;
              } else {
                s1 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c87); }
              }
              if (s1 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c88();
              }
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
              if (s0 === null) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c89) {
                  s1 = peg$c89;
                  peg$currPos += 2;
                } else {
                  s1 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c90); }
                }
                if (s1 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c91();
                }
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
                if (s0 === null) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c92) {
                    s1 = peg$c92;
                    peg$currPos += 2;
                  } else {
                    s1 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c93); }
                  }
                  if (s1 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c94();
                  }
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsewhitespace() {
      var s0;

      if (peg$c95.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c96); }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsewhitespace();
      while (s1 !== null) {
        s0.push(s1);
        s1 = peg$parsewhitespace();
      }

      return s0;
    }


        var procs = {};
        procs["log"] = log;
        procs["unify"] = unify_bif;
        procs["write"] = write_bif;
        procs["sum"] = sum_bif;


    peg$result = peg$startRuleFunction();

    if (peg$result !== null && peg$currPos === input.length) {
      return peg$result;
    } else {
      peg$cleanupExpected(peg$maxFailExpected);
      peg$reportedPos = Math.max(peg$currPos, peg$maxFailPos);

      throw new SyntaxError(
        peg$maxFailExpected,
        peg$reportedPos < input.length ? input.charAt(peg$reportedPos) : null,
        peg$reportedPos,
        peg$computePosDetails(peg$reportedPos).line,
        peg$computePosDetails(peg$reportedPos).column
      );
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
