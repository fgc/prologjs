var parser = (function() {
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { program: peg$parseprogram, query: peg$parsequery },
        peg$startRuleFunction  = peg$parseprogram,

        peg$c0 = peg$FAILED,
        peg$c1 = [],
        peg$c2 = function(assertions) {return assertions;},
        peg$c3 = ".",
        peg$c4 = { type: "literal", value: ".", description: "\".\"" },
        peg$c5 = function(query) {return query;},
        peg$c6 = "(",
        peg$c7 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c8 = ")",
        peg$c9 = { type: "literal", value: ")", description: "\")\"" },
        peg$c10 = function(disjunction) {return disjunction;},
        peg$c11 = ";",
        peg$c12 = { type: "literal", value: ";", description: "\";\"" },
        peg$c13 = function(head, tail) {
        	if (tail.length == 0) {
                    return head;
        	}
        	return {"term": "disj",
        	       "subterms": [head].concat(tail.map(function(t){return t[3];}))
        	       };
            },
        peg$c14 = ",",
        peg$c15 = { type: "literal", value: ",", description: "\",\"" },
        peg$c16 = function(head, tail) {
        	if (tail.length == 0) {
                    return head;
        	}
        	return {"term":"conj",
        		"subterms": [head].concat(tail.map(function(t){return t[3];}))
        	       };
            },
        peg$c17 = function(a) {
                return a;
            },
        peg$c18 = ":-",
        peg$c19 = { type: "literal", value: ":-", description: "\":-\"" },
        peg$c20 = function(head, body) {
                return {"term": "rule",
                        "head": head,
                        "body": body};
            },
        peg$c21 = function(b) {return b;},
        peg$c22 = function(s) {return s;},
        peg$c23 = function(cr) {return cr;},
        peg$c24 = function(l) {return l;},
        peg$c25 = function(c) {return {"term":"constant", "value":c};},
        peg$c26 = function(v) {return {"term":"variable", "name":v};},
        peg$c27 = function(proc, subterms) {
                return {"term":"bif", "proc":procs[proc], "args":subterms};
            },
        peg$c28 = function(proc) {
        	return {"term":"bif", "proc":procs[proc], "args":[]};
            },
        peg$c29 = "fail",
        peg$c30 = { type: "literal", value: "fail", description: "\"fail\"" },
        peg$c31 = "true",
        peg$c32 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c33 = "log",
        peg$c34 = { type: "literal", value: "log", description: "\"log\"" },
        peg$c35 = "unify",
        peg$c36 = { type: "literal", value: "unify", description: "\"unify\"" },
        peg$c37 = "write",
        peg$c38 = { type: "literal", value: "write", description: "\"write\"" },
        peg$c39 = "call",
        peg$c40 = { type: "literal", value: "call", description: "\"call\"" },
        peg$c41 = "sum",
        peg$c42 = { type: "literal", value: "sum", description: "\"sum\"" },
        peg$c43 = "mul",
        peg$c44 = { type: "literal", value: "mul", description: "\"mul\"" },
        peg$c45 = "not",
        peg$c46 = { type: "literal", value: "not", description: "\"not\"" },
        peg$c47 = "gt",
        peg$c48 = { type: "literal", value: "gt", description: "\"gt\"" },
        peg$c49 = "lt",
        peg$c50 = { type: "literal", value: "lt", description: "\"lt\"" },
        peg$c51 = "cons",
        peg$c52 = { type: "literal", value: "cons", description: "\"cons\"" },
        peg$c53 = "=",
        peg$c54 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c55 = "+",
        peg$c56 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c57 = "*",
        peg$c58 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c59 = ">",
        peg$c60 = { type: "literal", value: ">", description: "\">\"" },
        peg$c61 = "<",
        peg$c62 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c63 = function(functor, subterms) {
                return {"term":"structure", 
        		"functor":functor, 
        		"arity": subterms.length, 
        		"subterms":subterms
        	       };
            },
        peg$c64 = function(first, rest) {
                return [first].concat(rest.map(function(t){return t[2];}));
            },
        peg$c65 = "{",
        peg$c66 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c67 = "}",
        peg$c68 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c69 = function(subterms) {
        	return {"term":"structure", 
        		"functor":"{}", 
        		"arity": subterms.length, 
        		"subterms":subterms
        	       };
            },
        peg$c70 = "|",
        peg$c71 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c72 = "[]",
        peg$c73 = { type: "literal", value: "[]", description: "\"[]\"" },
        peg$c74 = function() {return {"term":"cons", "car":"nil"};},
        peg$c75 = "[",
        peg$c76 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c77 = null,
        peg$c78 = "]",
        peg$c79 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c80 = function(head, rest, tail) {
                function consify(elems,tail) {
                    if (elems.length == 0) {
        		if(tail == "") {
        		    return {
        			"term": "cons",
        			"car": "nil"};
        		}
        		return tail;
        	    }

                return {"term": "cons",
                        "car": elems[0],
                        "cdr": consify(elems.slice(1),tail)
                       };
        	}
        	return consify([head].concat(rest.map(function(t){
        	    return t[2];
        	})), tail || "");
        },
        peg$c81 = function(str) { return str;},
        peg$c82 = function(integer) {return integer;},
        peg$c83 = function(first, rest) {
                return first + rest.join("");
            },
        peg$c84 = "\"",
        peg$c85 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c86 = function() {return "";},
        peg$c87 = "'",
        peg$c88 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c89 = function(chars) {return chars.join("");},
        peg$c90 = /^[a-z]/,
        peg$c91 = { type: "class", value: "[a-z]", description: "[a-z]" },
        peg$c92 = /^[A-Z]/,
        peg$c93 = { type: "class", value: "[A-Z]", description: "[A-Z]" },
        peg$c94 = "_",
        peg$c95 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c96 = "-",
        peg$c97 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c98 = function(neg, digits) {
        	var neg = neg|"";
        	return parseInt(neg + digits.join(""));
            },
        peg$c99 = /^[0-9]/,
        peg$c100 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c101 = /^[^"\\\0-\x1F]/,
        peg$c102 = { type: "class", value: "[^\"\\\\\\0-\\x1F]", description: "[^\"\\\\\\0-\\x1F]" },
        peg$c103 = "\\\"",
        peg$c104 = { type: "literal", value: "\\\"", description: "\"\\\\\\\"\"" },
        peg$c105 = function() { return '"';  },
        peg$c106 = /^[^'\\\0-\x1F]/,
        peg$c107 = { type: "class", value: "[^'\\\\\\0-\\x1F]", description: "[^'\\\\\\0-\\x1F]" },
        peg$c108 = "\\'",
        peg$c109 = { type: "literal", value: "\\'", description: "\"\\\\'\"" },
        peg$c110 = function() { return "'";  },
        peg$c111 = /^[^|[\].,;(){}'"\\\0-\x1F]/,
        peg$c112 = { type: "class", value: "[^|[\\].,;(){}'\"\\\\\\0-\\x1F]", description: "[^|[\\].,;(){}'\"\\\\\\0-\\x1F]" },
        peg$c113 = "\\\\",
        peg$c114 = { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" },
        peg$c115 = function() { return "\\"; },
        peg$c116 = "\\/",
        peg$c117 = { type: "literal", value: "\\/", description: "\"\\\\/\"" },
        peg$c118 = function() { return "/";  },
        peg$c119 = "\\b",
        peg$c120 = { type: "literal", value: "\\b", description: "\"\\\\b\"" },
        peg$c121 = function() { return "\b"; },
        peg$c122 = "\\f",
        peg$c123 = { type: "literal", value: "\\f", description: "\"\\\\f\"" },
        peg$c124 = function() { return "\f"; },
        peg$c125 = "\\n",
        peg$c126 = { type: "literal", value: "\\n", description: "\"\\\\n\"" },
        peg$c127 = function() { return "\n"; },
        peg$c128 = "\\r",
        peg$c129 = { type: "literal", value: "\\r", description: "\"\\\\r\"" },
        peg$c130 = function() { return "\r"; },
        peg$c131 = "\\t",
        peg$c132 = { type: "literal", value: "\\t", description: "\"\\\\t\"" },
        peg$c133 = function() { return "\t"; },
        peg$c134 = /^[ \t\n\r]/,
        peg$c135 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
        peg$c136 = /^[\n\r\u2028\u2029]/,
        peg$c137 = { type: "class", value: "[\\n\\r\\u2028\\u2029]", description: "[\\n\\r\\u2028\\u2029]" },
        peg$c138 = { type: "other", description: "end of line" },
        peg$c139 = "\n",
        peg$c140 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c141 = "\r\n",
        peg$c142 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
        peg$c143 = "\r",
        peg$c144 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c145 = "\u2028",
        peg$c146 = { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
        peg$c147 = "\u2029",
        peg$c148 = { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
        peg$c149 = { type: "other", description: "comment" },
        peg$c150 = "/*",
        peg$c151 = { type: "literal", value: "/*", description: "\"/*\"" },
        peg$c152 = void 0,
        peg$c153 = "*/",
        peg$c154 = { type: "literal", value: "*/", description: "\"*/\"" },
        peg$c155 = { type: "any", description: "any character" },
        peg$c156 = "%",
        peg$c157 = { type: "literal", value: "%", description: "\"%\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$maxFailMessage   = null,
        peg$silentFails      = 0,
        peg$userFail         = false,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      if (peg$silentFails === 0) {
        peg$expected(
          { type: "other", description: description },
          peg$reportedPos
        );
      }
      peg$userFail = true;
    }

    function error(message) {
      if (peg$silentFails === 0) {
        peg$error(message, peg$reportedPos);
      }
      peg$userFail = true;
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$expected(expected, pos) {
      if (pos < peg$maxFailPos) { return; }

      if (pos > peg$maxFailPos) {
        peg$maxFailPos = pos;
        peg$maxFailExpected = [];
        peg$maxFailMessage = null;
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$error(message, pos) {
      if (pos < peg$maxFailPos) { return; }

      if (pos > peg$maxFailPos) {
        peg$maxFailPos = pos;
        peg$maxFailExpected = [];
        peg$maxFailMessage = null;
      }

      peg$maxFailMessage = message;
    }

    function peg$buildException() {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1].description === expected[i].description) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs, expectedDesc, foundDesc, i;

        switch (expected.length) {
          case 0:
            expectedDesc = "end of input";
            break;

          case 1:
            expectedDesc = expected[0].description;
            break;

          default:
            expectedDescs = new Array(expected.length);

            for (i = 0; i < expected.length; i++) {
              expectedDescs[i] = expected[i].description;
            }

            expectedDesc = expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1];
        }

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var pos        = Math.max(peg$currPos, peg$maxFailPos),
          posDetails = peg$computePosDetails(pos),
          expected   = peg$maxFailMessage === null ? peg$maxFailExpected : null,
          found      = pos < input.length ? input.charAt(pos) : null,
          message    = peg$maxFailMessage !== null
            ? peg$maxFailMessage
            : buildMessage(expected, found);

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message,
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parseprogram() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseassertion();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseassertion();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          peg$userFail = false;
          s1 = peg$c2(s2);
          if (peg$userFail) { s1 = peg$FAILED; }
          if (s1 === peg$FAILED) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequery() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsetermexpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c3;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c4, peg$currPos); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            peg$userFail = false;
            s1 = peg$c5(s1);
            if (peg$userFail) { s1 = peg$FAILED; }
            if (s1 === peg$FAILED) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetermexpr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$parsedisjunction();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c6;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c7, peg$currPos); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedisjunction();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s5 = peg$c8;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$expected(peg$c9, peg$currPos); }
                }
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  peg$userFail = false;
                  s1 = peg$c10(s3);
                  if (peg$userFail) { s1 = peg$FAILED; }
                  if (s1 === peg$FAILED) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsedisjunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseconjunction();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s5 = peg$c11;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c12, peg$currPos); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsedisjunction();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s5 = peg$c11;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c12, peg$currPos); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsedisjunction();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          peg$userFail = false;
          s1 = peg$c13(s1, s2);
          if (peg$userFail) { s1 = peg$FAILED; }
          if (s1 === peg$FAILED) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseconjunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsebase();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c14;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c15, peg$currPos); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsebase();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c14;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c15, peg$currPos); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsebase();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          peg$userFail = false;
          s1 = peg$c16(s1, s2);
          if (peg$userFail) { s1 = peg$FAILED; }
          if (s1 === peg$FAILED) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsebase() {
      var s0, s1, s2, s3;

      s0 = peg$parseterm();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c6;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c7, peg$currPos); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedisjunction();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s3 = peg$c8;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c9, peg$currPos); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              peg$userFail = false;
              s1 = peg$c10(s2);
              if (peg$userFail) { s1 = peg$FAILED; }
              if (s1 === peg$FAILED) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseassertion() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parserule();
      if (s1 === peg$FAILED) {
        s1 = peg$parseterm();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c3;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c4, peg$currPos); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            peg$userFail = false;
            s1 = peg$c17(s1);
            if (peg$userFail) { s1 = peg$FAILED; }
            if (s1 === peg$FAILED) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserule() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseterm();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c18) {
            s3 = peg$c18;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c19, peg$currPos); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetermexpr();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                peg$userFail = false;
                s1 = peg$c20(s1, s5);
                if (peg$userFail) { s1 = peg$FAILED; }
                if (s1 === peg$FAILED) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseterm() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebifcall();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          peg$userFail = false;
          s1 = peg$c21(s2);
          if (peg$userFail) { s1 = peg$FAILED; }
          if (s1 === peg$FAILED) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestructure();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            peg$userFail = false;
            s1 = peg$c22(s2);
            if (peg$userFail) { s1 = peg$FAILED; }
            if (s1 === peg$FAILED) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecurly();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              peg$userFail = false;
              s1 = peg$c23(s2);
              if (peg$userFail) { s1 = peg$FAILED; }
              if (s1 === peg$FAILED) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
              s2 = peg$parselist();
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                peg$userFail = false;
                s1 = peg$c24(s2);
                if (peg$userFail) { s1 = peg$FAILED; }
                if (s1 === peg$FAILED) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parse_();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseconstant();
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  peg$userFail = false;
                  s1 = peg$c25(s2);
                  if (peg$userFail) { s1 = peg$FAILED; }
                  if (s1 === peg$FAILED) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parse_();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsevariable();
                  if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    peg$userFail = false;
                    s1 = peg$c26(s2);
                    if (peg$userFail) { s1 = peg$FAILED; }
                    if (s1 === peg$FAILED) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsebifcall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebif();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s4 = peg$c6;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c7, peg$currPos); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetermList();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c8;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$expected(peg$c9, peg$currPos); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      peg$userFail = false;
                      s1 = peg$c27(s2, s6);
                      if (peg$userFail) { s1 = peg$FAILED; }
                      if (s1 === peg$FAILED) {
                        peg$currPos = s0;
                        s0 = s1;
                      } else {
                        s0 = s1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseunaryBif();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          peg$userFail = false;
          s1 = peg$c28(s1);
          if (peg$userFail) { s1 = peg$FAILED; }
        }
        if (s1 === peg$FAILED) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseunaryBif() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c29) {
        s0 = peg$c29;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c30, peg$currPos); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c31) {
          s0 = peg$c31;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c32, peg$currPos); }
        }
      }

      return s0;
    }

    function peg$parsebif() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c33) {
        s0 = peg$c33;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c34, peg$currPos); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c35) {
          s0 = peg$c35;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c36, peg$currPos); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c37) {
            s0 = peg$c37;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c38, peg$currPos); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c39) {
              s0 = peg$c39;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c40, peg$currPos); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c41) {
                s0 = peg$c41;
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$expected(peg$c42, peg$currPos); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c43) {
                  s0 = peg$c43;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$expected(peg$c44, peg$currPos); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c45) {
                    s0 = peg$c45;
                    peg$currPos += 3;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$expected(peg$c46, peg$currPos); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c47) {
                      s0 = peg$c47;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$expected(peg$c48, peg$currPos); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c49) {
                        s0 = peg$c49;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$expected(peg$c50, peg$currPos); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c51) {
                          s0 = peg$c51;
                          peg$currPos += 4;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$expected(peg$c52, peg$currPos); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 61) {
                            s0 = peg$c53;
                            peg$currPos++;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$expected(peg$c54, peg$currPos); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 43) {
                              s0 = peg$c55;
                              peg$currPos++;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$expected(peg$c56, peg$currPos); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 42) {
                                s0 = peg$c57;
                                peg$currPos++;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$expected(peg$c58, peg$currPos); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 62) {
                                  s0 = peg$c59;
                                  peg$currPos++;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$expected(peg$c60, peg$currPos); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 60) {
                                    s0 = peg$c61;
                                    peg$currPos++;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$expected(peg$c62, peg$currPos); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 46) {
                                      s0 = peg$c3;
                                      peg$currPos++;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$expected(peg$c4, peg$currPos); }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsestructure() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseconstant();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c6;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c7, peg$currPos); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetermList();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c8;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$expected(peg$c9, peg$currPos); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    peg$userFail = false;
                    s1 = peg$c63(s2, s5);
                    if (peg$userFail) { s1 = peg$FAILED; }
                    if (s1 === peg$FAILED) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetermList() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsebase();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c14;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c15, peg$currPos); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsebase();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c14;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c15, peg$currPos); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsebase();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          peg$userFail = false;
          s1 = peg$c64(s1, s2);
          if (peg$userFail) { s1 = peg$FAILED; }
          if (s1 === peg$FAILED) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecurly() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c65;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c66, peg$currPos); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetermList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s6 = peg$c67;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$expected(peg$c68, peg$currPos); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  peg$userFail = false;
                  s1 = peg$c69(s4);
                  if (peg$userFail) { s1 = peg$FAILED; }
                  if (s1 === peg$FAILED) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetail() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 124) {
        s1 = peg$c70;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c71, peg$currPos); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevariable();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            peg$userFail = false;
            s1 = peg$c26(s3);
            if (peg$userFail) { s1 = peg$FAILED; }
            if (s1 === peg$FAILED) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselist() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c72) {
          s2 = peg$c72;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c73, peg$currPos); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          peg$userFail = false;
          s1 = peg$c74();
          if (peg$userFail) { s1 = peg$FAILED; }
          if (s1 === peg$FAILED) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s2 = peg$c75;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c76, peg$currPos); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsebase();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s8 = peg$c14;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$expected(peg$c15, peg$currPos); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse_();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsebase();
                      if (s10 !== peg$FAILED) {
                        s8 = [s8, s9, s10];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s8 = peg$c14;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$expected(peg$c15, peg$currPos); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse_();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsebase();
                        if (s10 !== peg$FAILED) {
                          s8 = [s8, s9, s10];
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$c0;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsetail();
                      if (s8 === peg$FAILED) {
                        s8 = peg$c77;
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parse_();
                        if (s9 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 93) {
                            s10 = peg$c78;
                            peg$currPos++;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$expected(peg$c79, peg$currPos); }
                          }
                          if (s10 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            peg$userFail = false;
                            s1 = peg$c80(s4, s6, s8);
                            if (peg$userFail) { s1 = peg$FAILED; }
                            if (s1 === peg$FAILED) {
                              peg$currPos = s0;
                              s0 = s1;
                            } else {
                              s0 = s1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseconstant() {
      var s0, s1;

      s0 = peg$parsesmallConstant();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsestring();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          peg$userFail = false;
          s1 = peg$c81(s1);
          if (peg$userFail) { s1 = peg$FAILED; }
        }
        if (s1 === peg$FAILED) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseinteger();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            peg$userFail = false;
            s1 = peg$c82(s1);
            if (peg$userFail) { s1 = peg$FAILED; }
          }
          if (s1 === peg$FAILED) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsesmallConstant() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselowerCaseLetter();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseatomchar();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseatomchar();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          peg$userFail = false;
          s1 = peg$c83(s1, s2);
          if (peg$userFail) { s1 = peg$FAILED; }
          if (s1 === peg$FAILED) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevariable() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseupperCaseLetter();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseatomchar();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseatomchar();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          peg$userFail = false;
          s1 = peg$c83(s1, s2);
          if (peg$userFail) { s1 = peg$FAILED; }
          if (s1 === peg$FAILED) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c84;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c85, peg$currPos); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c84;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c85, peg$currPos); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            peg$userFail = false;
            s1 = peg$c86();
            if (peg$userFail) { s1 = peg$FAILED; }
            if (s1 === peg$FAILED) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s1 = peg$c87;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c88, peg$currPos); }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s2 = peg$c87;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c88, peg$currPos); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              peg$userFail = false;
              s1 = peg$c86();
              if (peg$userFail) { s1 = peg$FAILED; }
              if (s1 === peg$FAILED) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 39) {
            s1 = peg$c87;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c88, peg$currPos); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsesqchar();
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsesqchar();
              }
            } else {
              s2 = peg$c0;
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c87;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$expected(peg$c88, peg$currPos); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  peg$userFail = false;
                  s1 = peg$c89(s2);
                  if (peg$userFail) { s1 = peg$FAILED; }
                  if (s1 === peg$FAILED) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s1 = peg$c84;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c85, peg$currPos); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parsedqchar();
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parsedqchar();
                }
              } else {
                s2 = peg$c0;
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s3 = peg$c84;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$expected(peg$c85, peg$currPos); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    peg$userFail = false;
                    s1 = peg$c89(s2);
                    if (peg$userFail) { s1 = peg$FAILED; }
                    if (s1 === peg$FAILED) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parselowerCaseLetter() {
      var s0;

      if (peg$c90.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c91, peg$currPos); }
      }

      return s0;
    }

    function peg$parseupperCaseLetter() {
      var s0;

      if (peg$c92.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c93, peg$currPos); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s0 = peg$c94;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c95, peg$currPos); }
        }
      }

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c96;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c97, peg$currPos); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c77;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsedigit();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsedigit();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          peg$userFail = false;
          s1 = peg$c98(s1, s2);
          if (peg$userFail) { s1 = peg$FAILED; }
          if (s1 === peg$FAILED) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c99.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c100, peg$currPos); }
      }

      return s0;
    }

    function peg$parsedqchar() {
      var s0, s1;

      if (peg$c101.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c102, peg$currPos); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c103) {
          s1 = peg$c103;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c104, peg$currPos); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          peg$userFail = false;
          s1 = peg$c105();
          if (peg$userFail) { s1 = peg$FAILED; }
        }
        if (s1 === peg$FAILED) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsectrlchar();
        }
      }

      return s0;
    }

    function peg$parsesqchar() {
      var s0, s1;

      if (peg$c106.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c107, peg$currPos); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c108) {
          s1 = peg$c108;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c109, peg$currPos); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          peg$userFail = false;
          s1 = peg$c110();
          if (peg$userFail) { s1 = peg$FAILED; }
        }
        if (s1 === peg$FAILED) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsectrlchar();
        }
      }

      return s0;
    }

    function peg$parseatomchar() {
      var s0;

      if (peg$c111.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c112, peg$currPos); }
      }

      return s0;
    }

    function peg$parsectrlchar() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c113) {
        s1 = peg$c113;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c114, peg$currPos); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        peg$userFail = false;
        s1 = peg$c115();
        if (peg$userFail) { s1 = peg$FAILED; }
      }
      if (s1 === peg$FAILED) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c116) {
          s1 = peg$c116;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c117, peg$currPos); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          peg$userFail = false;
          s1 = peg$c118();
          if (peg$userFail) { s1 = peg$FAILED; }
        }
        if (s1 === peg$FAILED) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c119) {
            s1 = peg$c119;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c120, peg$currPos); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            peg$userFail = false;
            s1 = peg$c121();
            if (peg$userFail) { s1 = peg$FAILED; }
          }
          if (s1 === peg$FAILED) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c122) {
              s1 = peg$c122;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c123, peg$currPos); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              peg$userFail = false;
              s1 = peg$c124();
              if (peg$userFail) { s1 = peg$FAILED; }
            }
            if (s1 === peg$FAILED) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c125) {
                s1 = peg$c125;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$expected(peg$c126, peg$currPos); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                peg$userFail = false;
                s1 = peg$c127();
                if (peg$userFail) { s1 = peg$FAILED; }
              }
              if (s1 === peg$FAILED) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c128) {
                  s1 = peg$c128;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$expected(peg$c129, peg$currPos); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  peg$userFail = false;
                  s1 = peg$c130();
                  if (peg$userFail) { s1 = peg$FAILED; }
                }
                if (s1 === peg$FAILED) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c131) {
                    s1 = peg$c131;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$expected(peg$c132, peg$currPos); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    peg$userFail = false;
                    s1 = peg$c133();
                    if (peg$userFail) { s1 = peg$FAILED; }
                  }
                  if (s1 === peg$FAILED) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsewhitespace() {
      var s0;

      if (peg$c134.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c135, peg$currPos); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseComment();
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsewhitespace();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsewhitespace();
      }

      return s0;
    }

    function peg$parseLineTerminator() {
      var s0;

      if (peg$c136.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c137, peg$currPos); }
      }

      return s0;
    }

    function peg$parseLineTerminatorSequence() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c139;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c140, peg$currPos); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c141) {
          s0 = peg$c141;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c142, peg$currPos); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s0 = peg$c143;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c144, peg$currPos); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8232) {
              s0 = peg$c145;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c146, peg$currPos); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8233) {
                s0 = peg$c147;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$expected(peg$c148, peg$currPos); }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c138, peg$currPos); }
      }

      return s0;
    }

    function peg$parseComment() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseMultiLineComment();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSingleLineComment();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c149, peg$currPos); }
      }

      return s0;
    }

    function peg$parseMultiLineComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c150) {
        s1 = peg$c150;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c151, peg$currPos); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c153) {
          s5 = peg$c153;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$expected(peg$c154, peg$currPos); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c152;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c155, peg$currPos); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c153) {
            s5 = peg$c153;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c154, peg$currPos); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c152;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c155, peg$currPos); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c153) {
            s3 = peg$c153;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c154, peg$currPos); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSingleLineComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 37) {
        s1 = peg$c156;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$expected(peg$c157, peg$currPos); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseLineTerminator();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c152;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$expected(peg$c155, peg$currPos); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseLineTerminator();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c152;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$expected(peg$c155, peg$currPos); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }


        var procs = {};
        procs["log"] = log;
        procs["unify"] = unify_bif;
        procs["="] = unify_bif;
        procs["write"] = write_bif;
        procs["sum"] = sum_bif;
        procs["+"] = sum_bif;
        procs["mul"] = mul_bif;
        procs["*"] = mul_bif;
        procs["not"] = not_bif;
        procs["gt"] = gt_bif;
        procs["lt"] = lt_bif;
        procs[">"] = gt_bif;
        procs["<"] = lt_bif;
        procs["cons"] = cons_bif;
        procs["."] = cons_bif;
        procs["fail"] = fail_bif;
        procs["true"] = true_bif;
        procs["call"] = call_bif;


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      throw peg$buildException();
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
